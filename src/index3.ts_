import { readFileSync, writeFileSync } from "fs";
import { DataSet } from "./data/DataSet";
import {
  Identity,
  Lrelu,
  Relu,
  Sigmoid,
  SoftPlus,
  Tanh,
} from "./neural-networks/ActivationFunction";
import { CrossEntropy, MeanSquaredError } from "./neural-networks/LossFunction";
import { MultilayerPerceptron } from "./neural-networks/MultilayerPerceptron";
import { UniformDistribution } from "./prob/distributions/Uniform";
import { field, maxIndex, parseMnistDataSet } from "./utils/helpers";
import { Vector } from "./vector/Vector";
import * as readline from "readline";
import getPixel from "get-pixels";
import _ from "underscore";

const rl = readline.createInterface(process.stdin);

/*
const weights = JSON.parse(
  readFileSync(process.cwd() + "/src/dataset/mnist_weights_1.json").toString()
);
*/

const mlp = new MultilayerPerceptron({
  inputWidth: 784,
  hiddenWidth: 200,
  hiddenDepth: 1,
  outputWidth: 1,
  hiddenActivationFuncs: [new Relu()],
  outputActivationFunc: new Sigmoid(),
  // weights,
});

const mnistTrainSet = parseMnistDataSet(
  process.cwd() + "/src/dataset/mnist_train.csv"
).map((x) => ({
  features: x.features.map((y) => y / 255),
  response: x.response,
}));

const mnistTestSet = parseMnistDataSet(
  process.cwd() + "/src/dataset/mnist_test.csv"
).map((x) => ({
  features: x.features.map((y) => y / 255),
  response: x.response,
}));

const trainingSet = new DataSet([
  ...mnistTrainSet.filter((x) => x.response === 8),
  ..._.sample(
    mnistTrainSet.filter((x) => x.response !== 8),
    5000
  ),
]);
const validationSet = new DataSet(mnistTestSet);

mlp.train(
  trainingSet,
  field("features"),
  [(x) => (x.response === 8 ? 0.99999 : 0.00001)],
  {
    learningRate: 0.002,
    stochastic: true,
    lossFunc: new CrossEntropy(),
    batchSize: 1,
    epochs: 10000,
    validationSet,
  }
);

console.log("Trained!");

writeFileSync(
  process.cwd() + "/src/dataset/mnist_weights_8.json",
  JSON.stringify(mlp.edges.map((e) => e.weight))
);

console.log("Save!");

for (const [index, instance] of mnistTestSet.entries()) {
  const z = mlp.predict(new Vector(instance.features.map((x) => x / 255)))
    .entries[0];
  console.log({
    index,
    predict: z > 0.5 ? 8 : "other",
    expect: instance.response,
    prob: z,
  });
}

/*
getPixel(process.cwd() + "/src/dataset/test_image.jpg", (err, pixels) => {
  const image = new Array(784);

  for (let i = 0; i < 28; i++) {
    for (let j = 0; j < 28; j++) {
      image[i * 28 + j] = Math.round(
        255 -
          (0.2989 * pixels.get(j, i, 0) +
            0.587 * pixels.get(j, i, 1) +
            0.114 * pixels.get(j, i, 2))
      );
    }
  }

  const predicted = mlp.predict(new Vector(image.map((x) => x / 255)))
    .entries[0];
  if (predicted > 0.5) {
    console.log("Yes it is 0!");
  } else {
    console.log("Not 0!");
  }
});
*/